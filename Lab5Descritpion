Background:  The pseudocode below is simplified and adapted from an ownership transfer protocol for RFID tags using a trusted third-party called TTP-mtOTP.  
The protocol transfers ownership (indicated by a shared secret) of a collection of RFID tags from an old owner to a new owner.   TTP-mtOTP is to execute securely 
in the presence of an adversary and maintain privacy of 
the tags.

Experiment:

•	Assume that all data items are word size.
•	Define each of the arrays to hold at least five elements.
•	Initialize all data items in the data area to 0.
•	For Part 1 and Part 2, you will be given test data during lab time for which your code must work to receive credit.

1) (25 points) Construct a Cortex-M4 assembly program to implement the pseudocode below.  This code is from the steps the old owner (OO) takes to check and record for 
each tag whether it receives a valid response. OO will check whether it receives a nonzero response and whether that response matches a value that it calculates.  
Define the following data items in the code area:  size, mi_O1, s_RT, and arrays r¬_T2 and ack_T2. (Variable size is the number of tags, mi_O1 is a message integrity 
check value from OO, s¬_RT is a secret shared by OO and tags, ack_T2 holds the responses from tags, and each entry of r¬_T2 is 
a random number generated by a tag.)  Define the following data array in the data area:  valid.

for i = 0 to size  1
	if ack_T2(i) != 0 and ack_T2(i) = mi_O1 XOR s_RT XOR r¬_T2(i)
		valid(i) <-- 1
else
		valid(i) <-- 0


Demonstrate your results to the lab TA.

2) (25 points) Construct a Cortex-M4 assembly program to implement the pseudocode below.  This code is from steps a tag takes to determine its rank in the order 
that OO is communicating with tags.  Define the following data items in the code area:  PID and array PID_Q.  Define the following data items in the data area:  
rank and abort.  The value of count can be held in a register.

rank <-- 0
count <-- 0
while PID_Q(count) != 0
	if PID_Q(count) = PID
		rank <-- count + 1
	count <-- count + 1
if rank = 0
	abort <-- 1
else
	abort <-- 0

Demonstrate your results to the lab TA.

